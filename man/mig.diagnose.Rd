% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diagnostics.R
\name{mig.diagnose}
\alias{mig.diagnose}
\alias{bayesMig.convergence}
\title{MCMC convergence diagnostics}
\usage{
mig.diagnose(
  sim.dir,
  thin = 80,
  burnin = 2000,
  express = FALSE,
  country.sampling.prop = NULL,
  keep.thin.mcmc = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{sim.dir}{Directory with MCMC simulation results.}

\item{thin}{Thinning interval.}

\item{burnin}{Number of iterations to discard from the beginning of the parameter traces.}

\item{express}{Logical. If \code{TRUE}, the convergence diagnostic is run only on the country-independent
parameters. If \code{FALSE}, the country-specific parameters are included in the diagnostics. The number of
countries can be controlled by \code{country.sampling.prop}.}

\item{country.sampling.prop}{Proportion of countries to include in the diagnostics. If it is \code{NULL} and
\code{express=FALSE}, all countries are included. Setting a number between 0 and 1 will determine the proportion of countries
to be randomly sampled. For long Markov chains, this argument may significantly influence the runtime of this function.}

\item{keep.thin.mcmc}{Logical. If \code{TRUE}, the thinned traces used for computing the diagnostics are stored on disk.}

\item{verbose}{Logical value. Switches log messages on and off.}
}
\value{
An object of class \code{bayesMig.convergence} containing summaries of the convergence check inputs and outputs
}
\description{
Runs convergence diagnostics of existing migration Markov chains using the \code{raftery.diag} function from the \code{coda} package.
}
\examples{
\dontrun{
mig.diagnose(sim.dir='./bayesMig.output', burnin=100, thin=1)
}
}
